#Маршрутизация

#Структура URL-строки
https://site.com/author/b45erlz?category=adventure&status=unread#comments
-https:// - протокол
-site.com/ - хост
-author/b45erlz - путь, то где мы находимся в приложении
-b45erlz - url-параметр. Параметры бывают динамическими или статическими
-? - символ начала строки запроса
-?category=adventure&status=unread​ - строка запроса
-category=adventure - пара параметр=значение
-& - символ "И", разделяет параметры строки запроса
-#comments - якорь (хеш), определяет положение на странице


#История навигации
Существует несколько типов истории.
- Browser history - использует HTML5 History API, стандарт управления историей браузера из JavaScript.
- Hash history - в старых браузерах не поддерживается HTML5 History API, поэтому для них существует эта реализация.
- Memory history - позволяет использовать историю сессии в памяти, вне окна браузера. К примеру для тестирования логики без интерфейса и в средах без DOM, к примеру React Native.



#React Router 
Предоставляет набор компонентов для управления частями URL-строки и отображения различных компонетов в зависимости от текущего ее состояния. Разбит на пакеты для различных платформ, нам нужуен react-router-dom.
Документация https://reactrouter.com/web/guides/philosophy
- BrowserRouter
- Route 
  - проп component
  - проп render
- Switch
- Redirect
- Link и NavLink
- Route props
  - проп match
  - проп location
  - проп history



#Строка запроса
- https://app.com/articles?category=health&sortBy=latest
Текущее значение строки запроса хранится в пропе location.
{
  key: 'ac3df4',
  pathname: '/articles',
  search: '?category=health&sortBy=latest',
  hash: ''
}


#Извлечение параметров
Чтобы получить значения параметров, можно использовать возможности нативного класса URLSearchParams, а также библиотеки qs или query-string. Любой метод позволит сделать парс строки запроса и получить объект с парами ключ:значение.

#Изменение параметров
Необходимо обновлять URL используя метод history.push() для добавления новой записи в журнал истории.

#Отслеживание изменений
Если меняется строка запроса, компоненту пробрасываются новые пропсы, и в методе componentDidUpdate() можно проверить изменилась ли. Если изменились, делаем HTTP-запрос или сортируем.

#Редиректы
- Проп history
history.push() - добавит новую запись в журнал истории, пользователь может вернуться на тот маршрут с которого пришел.
history.replace() - перезапишет текущую запись в журнале истории затерев текущую, пользователь не сможет вернутся на маршрут с которого пришел.

- Свойство location.state
Позволяет передавать кастомные данные между маршрутами. Например список статей это ссылки, при клике в ссылку переходим на новый маршрут - страницу статьи.
Нужно учитывать ситуацию когда пользователь перешел на страницу статьи по сохраненный ссылке, и в текущей сессии не был на странице всех статей. В свойстве location.state не будет объекта, и попытка доступа к state.from приведет к ошибке выполнения скрипта.
Поэтому необходимо проверить location.state. Если state есть - перенаправляем пользователя туда, откуда он пришел. Если state нет - перенаправляем на /articles, при этом параметр category назначаем по свойству статьи (если в объекте статьи есть такое свойство).


# Доп материалы
https://ui.dev/build-your-own-react-router-v4/
https://github.com/reach/router
