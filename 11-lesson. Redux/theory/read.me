#Основные принципы Redux
- Предсказуемость результата - существует всегда один источник правды, хранилище (store), хранящее в себе состояние приложения и методы для работы с ним.
- Поддреживаемость - есть набор правил и лучших практик о том, как должен быть структурирован код, что делает его более единообразным и понятным.
- Инструменты разработчика - все происходящее можно отслеживать в режиме реального времени.
- Простота тестирования - первое правило написания тестируемого кода - писать небольшие функции, которые выполняют только одну вещь и независимы. Redux - это в основном функции: маленькие, чистые и изолированные.


# Store
Хранилище (store) - js-объект, который содержит состояние приложения и методы доступа к нему, отправки действий и регистрации слушателей.

-Хранит состояние (state) приложения как один объект
- Позволяет получить доступ к состоянию через метод getState()
- Напрямую состояние доступно только для чтения
- Единственный способ изменить состояние - отправить действие (action), объект, описывающий, что произошло
- Для отправки дейсвтий есть метод dispatch(action)
- Изменения производятся с использованием чистых функций - редюсеров (reducers), которые реагируют на действия
- Регистрирация слушателей делается методом subscribe(listener)
- Так как все состояние приложения хранится как один объект, стоит подумать о форме состояния прежде чем писать какой-либо код. Продумайте минимальное представление состояния приложения в виде объекта.

#Функция createStore
[createStore(reducer, [preloadedState], [enhancer])]
- reducer - функция, которая возвращает следующее дерево состояния, учитывая текущее дерево состояния и действие для обработки.
- preloadedState - начальное состояние, к примеру сериализаванное состояние последнего пользовательского сеанса. Это должен быть объект той же формы, что и, как минимум, часть состояния.
- enhancer - расширяет возможности хранилища при помощи прослоек (middleware).


#Actions
Действия (actions) - это объекты, которые помогают доставить данные из компонентов в хранилище.

-Хранят минимально необходимый набор информации.
- Должны иметь свойство type, которое указывает тип выполняемого действия.
- Помимо поля type, структура действия может быть произвольной.


#Reducers
[(previousState, action) => newState]
Редюсеры (reducers) - это чистые функции, которые принимают предыдущее состояние приложения и действие, а затем возвращают новое следующее состояние.
Они определяют, как изменяется состояние приложения в ответ на действия, отправленные в хранилище. Помните, что действия описывают только то, что произошло, а не как изменяется состояние приложения.

Вещи, которые нельзя делать внутри редюсера:
- Мутировать аргументы
- Выполнять побочные эффекты, такие как API-запросы и т. п.
- Вызывать нечистые функции, например Date.now()


React и Redux
npm install react-redux

Provider
Компонент <Provider>, оборачивает все дерево компонентов приложения и, используя контекст, предоставляет store и его методы.

import { createStore } from 'redux';
import { Provider } from 'react-redux';

// Болванка под reducer
const reducer = (state = {}, action) => state;

const store = createStore(reducer);

<Provider store={store}>
  <App />
</Provider>;



#connect()
[connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(Component)]
Если какой-либо компонент хочет получить доступ к store, он должен быть обернут в функцию connect(), которая свяжет компонент и store. Предоставляет доступ к state и disaptch().
connect это HOC, он не изменяет переданный ему компонент, а возвращает новый компонент связанный с хранилищем.


- mapStateToProps(state, [ownProps]) - функция соединяющая часть состояния с пропами компонента. Таким образом, связанный компонент будет иметь доступ к необходимой ему части состояния.
Получает state как параметр и позволяет выбрать из всего state только необходимые компоненту слайсы (части).
Возвращает объект, свойства которого дополнят props компонента.
Вызывается каждый раз когда хранилище обновляется.
Если нет необходимости подписываться на обновления, передаем null.
Если функция объявлена ​​как принимающая два параметра, первым будет передана ссылка на state, а вторым ссылка на пропы самого компонента.


- mapDispatchToProps(dispatch, [ownProps])- функция соединяющая отправку действий с пропами компонента. Таким образом, связанный компонент сможет отправлять действия посредством вызова методов указанных в возвращаемом объекте.
Получает ссылку на метод dispatch как параметр и позволяет объявить методы для отправки действий.
Возвращает объект, свойства которого дополнят props компонента.
Если функция объявлена ​​как принимающая два параметра, первым будет передана ссылка на dispatch, а вторым ссылка на пропы самого компонента.



# Организация хранилища
Необходимо хранить все состояние приложения в Redux? Можно ли использовать setState()? Как разработчик, ваша задача - определить, из какого набора данных состоит приложение, и где их лучше хранить.
Некоторые общие правила для определения того, какие данные должны быть помещены в Redux. Если ответ да, то есть смысл использовать хранилище, а не локальное состояние.
Необходимы ли эти данные другим частям приложения?
Необходимо ли на основе этих данных создавать дополнительные производные?
Используются ли од/ ни и те же данные для управления несколькими компонентами?
Есть ли необходимость в кешировании?



Композиция редюсеров
Еще одна полезная функция Redux - возможность делать композицию редьюсеров, то есть совмещать много в один. Это позволяет удобно поддерживать гораздо более сложные состояния в больших приложениях. Для этого используется функция combineReducers().


import { combineReducers } from 'redux';
import notesReducer from './notes';
import filterReducer from './filter';

const rootReducer = combineReducers({
  notes: notesReducer,
  filter: filterReducer,
});

export default rootReducer;


Ссылки
https://redux.js.org/
https://jaysoo.ca/2016/02/28/organizing-redux-application/
https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6

Курс по Redux Dan Abramov
https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867
https://egghead.io/courses/building-react-applications-with-idiomatic-redux


https://medium.com/devschacht/redux-step-by-step-e6c42a9b00cd
https://trello-attachments.s3.amazonaws.com/59f1a4faa946cdc5b223e904/5b3942f050cf8a07452d6cf4/66ef29154a03d02375d1ffebf6dcb292/react-redux-workflow-graphical-cheat-sheet_v110.png